BRDB SQL Tables:

blobs: Stores the raw data of the world, delta_base_id refers to other blobs
revisions: Likely refers to consecutive saves on the same DB, maybe the idea here is to decrease save times by only saving the differences?
folders: Tree of ids with associated names, parent_id refers to other folders.
files: Collection of ids with associated names, parent_id refers to other folders, content_id points to the associated blob_id.

blobs are compressed using zstd compression when their compression field is set to 1.
Therefore the user MUST have zstd installed on their system.

Table structure rundown:

blobs:
{
  blob_id: Integer PRIMARY KEY,
  compression: Integer,
  size_uncompressed: Integer,
  size_compressed: Integer,
  delta_base_id: Integer,
  hash: Blob,
  content: Blob
}

revisions:
{
  revision_id: Integer PRIMARY KEY,
  description: Text,
  created_at: Integer
}

folders:
{
  folder_id: Integer PRIMARY KEY,
  parent_id: Integer REFERENCES folders(folder_id),
  name: Text,
  created_at: Integer,
  deleted_at: Integer
}

files:
{
  file_id: Integer PRIMARY KEY,
  parent_id: Integer REFERENCES folders(folder_id),
  name: Text,
  content_id: Integer,
  created_at: Integer,
  deleted_at: Integer
}


The folders and files represent a virtual file system.

.mps files contain raw data, they must be paired with a .schema in the same folder or parents if shared.
  
When parsing raw data, the top level structure to start from is located at the bottom of the schema.

The db filesystem is in this structure:

{
Meta
  Bundle.json
  World.json
  Screenshot.jpg
World
  0
    Entities
      Chunks?
        x_x_x.mps // schema found at ChunksShared.schema  1 layer above
      ChunkIndex.mps // schema found at ChunkIndex.schema at the same layer
      ChunkIndex.schema
      ChunksShared.schema
    Bricks
      Grids
        1..n
          Chunks? 
            x_x_x.mps // schema found at ChunksShared.schema  3 layers above
          Components? 
            x_x_x.mps // schema found at ComponentsShared.schema  3 layers above
          Wires? 
            x_x_x.mps // schema found at WiresShared.schema 3 layers above
          ChunkIndex.mps // schema found at ChunkIndexShared.schema 2 layers above
      ChunkIndexShared.schema
      ChunksShared.schema
      ComponentsShared.schema
      WiresShared.schema
    Environment.bp
    Minigame.bp
    Owners.mps // schema found at Owners.schema at the same layer
    Owners.schema
    GlobalData.mps // schema found at GlobalData.schema at the same layer
    GlobalData.schema
}    
          
